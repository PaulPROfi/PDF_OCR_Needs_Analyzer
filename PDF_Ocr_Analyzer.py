import tkinter as tk  # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
from tkinter import filedialog, messagebox  # –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
import fitz  # PyMuPDF - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF, –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
import os  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –ø—É—Ç—è–º–∏
import cv2  # OpenCV - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏
import numpy as np  # –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
from pdf2image import convert_from_path  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
import shutil  # –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
import glob  # –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
import csv  # –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Ñ–æ—Ä–º–∞—Ç

def setup_poppler():
    """
    –ù–∞—Ö–æ–¥–∏—Ç Poppler –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str –∏–ª–∏ None: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ bin Poppler –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # –ò—â–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª pdftoppm –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH
    poppler_cmd = shutil.which("pdftoppm")
    if poppler_cmd:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
        poppler_dir = os.path.dirname(poppler_cmd)
        print(f"‚úì Poppler –Ω–∞–π–¥–µ–Ω: {poppler_dir}")
        return poppler_dir
    else:
        print("‚ùå Poppler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Poppler –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞–ø–∫—É bin –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PATH")
        return None

def analyze_pdf_text_layer(pdf_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é PyMuPDF
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
    - –ù–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
    - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö/–Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        pdf_path (str): –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
    """
    print("üìñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π...")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
    doc = fitz.open(pdf_path)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        'has_text_layer': False,  # –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        'total_pages': len(doc),  # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        'pages_with_text': 0,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º
        'total_text_length': 0,  # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
        'text_pages_ratio': 0.0,  # –¥–æ–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞
        'avg_text_per_page': 0.0  # —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    for page_num in range(len(doc)):
        page = doc[page_num]  # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        text = page.get_text()  # –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        # –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        if text.strip():
            results['has_text_layer'] = True  # –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
            results['pages_with_text'] += 1  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            results['total_text_length'] += len(text.strip())  # —Å—É–º–º–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if results['total_pages'] > 0:
        # –î–æ–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º = —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã / –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        results['text_pages_ratio'] = results['pages_with_text'] / results['total_pages']
        # –°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É = –æ–±—â–∏–π —Ç–µ–∫—Å—Ç / —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–∏–Ω–∏–º—É–º 1 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0)
        results['avg_text_per_page'] = results['total_text_length'] / max(results['pages_with_text'], 1)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å
    doc.close()
    return results

def calculate_text_density(image):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é
    
    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PIL Image –≤ numpy array
    2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    3. –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–µ—Ä–Ω—ã–π (—Ç–µ–∫—Å—Ç) –∏ –±–µ–ª—ã–π (—Ñ–æ–Ω)
    4. –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —á–µ—Ä–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –∫–æ –≤—Å–µ–º –ø–∏–∫—Å–µ–ª—è–º
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        image: PIL Image –æ–±—ä–µ–∫—Ç
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –æ—Ç 0.0 (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞) –¥–æ 1.0 (–≤—Å–µ –ø–∏–∫—Å–µ–ª–∏ —á–µ—Ä–Ω—ã–µ)
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image –≤ numpy array –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenCV
        img_array = np.array(image)
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–µ (3 –∫–∞–Ω–∞–ª–∞), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
        if len(img_array.shape) == 3:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        else:
            gray = img_array  # —É–∂–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∞—Ö —Å–µ—Ä–æ–≥–æ
        
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        # THRESH_BINARY_INV - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –±–µ–ª—ã–º (255), –∞ —Ñ–æ–Ω —á–µ—Ä–Ω—ã–º (0)
        _, binary = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY_INV)
        
        # –ü–æ–¥—Å—á–µ—Ç —á–µ—Ä–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π (–≤ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–≤—à–∏–π —Ç–µ–∫—Å—Ç)
        black_pixels = np.sum(binary == 255)  # —Å—á–∏—Ç–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 255 (–±–µ–ª—ã–µ)
        total_pixels = binary.shape[0] * binary.shape[1]  # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π
        
        # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ = —á–µ—Ä–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ / –≤—Å–µ –ø–∏–∫—Å–µ–ª–∏
        text_density = black_pixels / total_pixels
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1.0
        return min(text_density, 1.0)
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        print(f"‚ö† –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏: {e}")
        return 0.0

def analyze_visual_text_density(pdf_path, sample_pages=5):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö PDF
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        pdf_path (str): –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        sample_pages (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: —Å—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    """
    print("üëÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å...")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        images = convert_from_path(
            pdf_path, 
            first_page=1, 
            last_page=min(sample_pages, 10),  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ –±–æ–ª–µ–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü
            dpi=100  # –Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        )
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not images:
            return 0.0
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        densities = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for i, img in enumerate(images):
            density = calculate_text_density(img)
            densities.append(density)
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}: –ø–ª–æ—Ç–Ω–æ—Å—Ç—å {density:.3%}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        avg_density = np.mean(densities) if densities else 0.0
        print(f"   –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {avg_density:.3%}")
        
        return avg_density
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return 0.0

def get_file_metrics(pdf_path):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ñ–∞–π–ª–∞
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        pdf_path (str): –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–∞–π–ª–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞
    file_stats = os.stat(pdf_path)
    
    return {
        'file_size_mb': file_stats.st_size / (1024 * 1024),  # —Ä–∞–∑–º–µ—Ä –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
        'filename': os.path.basename(pdf_path)  # –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏
    }

def needs_ocr_analysis(text_analysis, visual_analysis, file_metrics):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫
    
    –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR:
    1. –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è –≤–æ–æ–±—â–µ
    2. –ú–µ–Ω—å—à–µ 30% —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç
    3. –ù–∏–∑–∫–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (<2%)
    4. –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞–Ω—ã)
    5. –ú–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        text_analysis (dict): —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
        visual_analysis (float): –≤–∏–∑—É–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        file_metrics (dict): —Ñ–∞–π–ª–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è OCR, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR
    rules = [
        # –ü—Ä–∞–≤–∏–ª–æ 1: –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è –≤–æ–æ–±—â–µ
        not text_analysis['has_text_layer'],
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –ú–µ–Ω—å—à–µ 30% —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç
        text_analysis['text_pages_ratio'] < 0.3,
        
        # –ü—Ä–∞–≤–∏–ª–æ 3: –ù–∏–∑–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (–º–µ–Ω—å—à–µ 2%)
        visual_analysis < 0.02,
        
        # –ü—Ä–∞–≤–∏–ª–æ 4: –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞–Ω—ã)
        (file_metrics['file_size_mb'] > 5 and 
         text_analysis['avg_text_per_page'] < 50),
        
        # –ü—Ä–∞–≤–∏–ª–æ 5: –ú–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
        (text_analysis['total_pages'] > 10 and 
         text_analysis['text_pages_ratio'] < 0.5)
    ]
    
    # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è - –Ω—É–∂–µ–Ω OCR
    return any(rules)

def analyze_pdf_ocr_need(pdf_path):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR –¥–ª—è –æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞
    
    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è —á–µ—Ä–µ–∑ PyMuPDF  
    3. –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
    4. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        pdf_path (str): –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF: {os.path.basename(pdf_path)}")
    print("=" * 50)
    
    try:
        # 1. –§–∞–π–ª–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        file_metrics = get_file_metrics(pdf_path)
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_metrics['file_size_mb']:.2f} MB")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
        text_analysis = analyze_pdf_text_layer(pdf_path)
        print(f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º: {text_analysis['pages_with_text']}/{text_analysis['total_pages']}")
        print(f"üìä –î–æ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {text_analysis['text_pages_ratio']:.1%}")
        print(f"üìù –°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {text_analysis['avg_text_per_page']:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 3. –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Poppler –¥–æ—Å—Ç—É–ø–µ–Ω)
        poppler_path = setup_poppler()
        if poppler_path:
            visual_density = analyze_visual_text_density(pdf_path)
            print(f"üéØ –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {visual_density:.3%}")
        else:
            visual_density = 0.0
            print("‚ö† Poppler –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # 4. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR
        ocr_required = needs_ocr_analysis(text_analysis, visual_density, file_metrics)
        
        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'filename': file_metrics['filename'],
            'has_text_layer': text_analysis['has_text_layer'],
            'text_pages_ratio': text_analysis['text_pages_ratio'],
            'avg_text_density': visual_density,
            'ocr_required': ocr_required,
            'file_size_mb': file_metrics['file_size_mb'],
            'total_pages': text_analysis['total_pages']
        }
        
        print("=" * 50)
        status = "üö® OCR –¢–†–ï–ë–£–ï–¢–°–Ø" if ocr_required else "‚úÖ OCR –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø"
        print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {status}")
        
        return result
        
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def select_folder():
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å PDF —Ñ–∞–π–ª–∞–º–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str –∏–ª–∏ None: –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏–ª–∏ None –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
    """
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ tkinter
    root = tk.Tk()
    root.withdraw()  # —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
    folder_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å PDF —Ñ–∞–π–ª–∞–º–∏")
    return folder_path

def find_pdf_files(folder_path):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –∏ –µ–µ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        folder_path (str): –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list: —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω—ã—Ö –ø—É—Ç–µ–π –∫ PDF —Ñ–∞–π–ª–∞–º
    """
    # **/*.pdf - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
    pdf_files = glob.glob(os.path.join(folder_path, "*.pdf"))
    return pdf_files

def analyze_pdf_folder(folder_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ PDF —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        folder_path (str): –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å PDF —Ñ–∞–π–ª–∞–º–∏
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list: —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not os.path.exists(folder_path):
        print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return []
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    pdf_files = find_pdf_files(folder_path)
    
    if not pdf_files:
        print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ!")
        return []
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
    print("=" * 60)
    
    results = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, pdf_path in enumerate(pdf_files, 1):
        print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i}/{len(pdf_files)}:")
        print(f"   {os.path.basename(pdf_path)}")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π PDF —Ñ–∞–π–ª
            result = analyze_pdf_ocr_need(pdf_path)
            if result:
                results.append(result)
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            results.append({
                'filename': os.path.basename(pdf_path),
                'has_text_layer': False,
                'text_pages_ratio': 0.0,
                'avg_text_density': 0.0,
                'ocr_required': True,  # –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ OCR –Ω—É–∂–µ–Ω
                'file_size_mb': os.path.getsize(pdf_path) / (1024 * 1024),
                'total_pages': 0,
                'error': str(e)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            })
    
    return results

def print_summary_report(results):
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        results (list): —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    """
    print("\n" + "=" * 80)
    print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –§–ê–ô–õ–ê–ú")
    print("=" * 80)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_files = len(results)
    ocr_required_count = sum(1 for r in results if r.get('ocr_required', False))
    has_text_count = sum(1 for r in results if r.get('has_text_layer', False))
    
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"üî§ –§–∞–π–ª–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º: {has_text_count}")
    print(f"üéØ –¢—Ä–µ–±—É—é—Ç OCR: {ocr_required_count}")
    print(f"‚úÖ –ù–µ —Ç—Ä–µ–±—É—é—Ç OCR: {total_files - ocr_required_count}")
    print("-" * 80)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã: —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–±—É—é—â–∏–µ OCR, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    results_sorted = sorted(results, key=lambda x: (not x.get('ocr_required', False), x['filename']))
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É
    for result in results_sorted:
        status = "üö® OCR –¢–†–ï–ë–£–ï–¢–°–Ø" if result.get('ocr_required', False) else "‚úÖ OCR –ù–ï –ù–£–ñ–ï–ù"
        error_mark = " ‚ö† –û–®–ò–ë–ö–ê" if result.get('error') else ""
        
        print(f"{result['filename']:<40} {status}{error_mark}")
        
        if result.get('error'):
            # –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            print(f"   –û—à–∏–±–∫–∞: {result['error']}")
        else:
            # –î–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            print(f"   –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π: {'–ï—Å—Ç—å' if result['has_text_layer'] else '–ù–µ—Ç'}")
            print(f"   –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {result.get('avg_text_density', 0):.3%}")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º: {result.get('text_pages_ratio', 0):.1%}")

def save_to_csv(results, filename):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ CSV —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        results (list): —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        filename (str): –∏–º—è CSV —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–ª—è CSV —Ñ–∞–π–ª–∞
    fieldnames = ['filename', 'has_text_layer', 'avg_text_density', 'ocr_required']
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            for result in results:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                row = {field: result.get(field, '') for field in fieldnames}
                writer.writerow(row)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
    """
    print("üéØ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR –¥–ª—è PDF —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    # 1. –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    folder_path = select_folder()
    if not folder_path:
        print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!")
        return False
    
    # 2. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
    results = analyze_pdf_folder(folder_path)
    
    if results:
        # 3. –í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        print_summary_report(results)
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Ñ–∞–π–ª
        save_to_csv(results, "ocr_analysis_report.csv")
        
        # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        ocr_required_count = sum(1 for r in results if r.get('ocr_required', False))
        messagebox.showinfo("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 
                          f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}\n"
                          f"–¢—Ä–µ–±—É—é—Ç OCR: {ocr_required_count}")
    else:
        messagebox.showwarning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª!")
    
    return True

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    success = main()
    
    # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if success:
        print("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")