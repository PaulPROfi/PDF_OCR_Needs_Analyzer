import fitz  # PyMuPDF
import os
import cv2
import numpy as np
from pdf2image import convert_from_path
import shutil

def analyze_pdf_text_layer(pdf_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
    """
    print("üìñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π...")
    
    doc = fitz.open(pdf_path)
    results = {
        'has_text_layer': False,
        'total_pages': len(doc),
        'pages_with_text': 0,
        'total_text_length': 0,
        'text_pages_ratio': 0.0,
        'avg_text_per_page': 0.0
    }
    
    for page_num in range(len(doc)):
        page = doc[page_num]
        text = page.get_text()
        
        if text.strip():  # –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
            results['has_text_layer'] = True
            results['pages_with_text'] += 1
            results['total_text_length'] += len(text.strip())
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    if results['total_pages'] > 0:
        results['text_pages_ratio'] = results['pages_with_text'] / results['total_pages']
        results['avg_text_per_page'] = results['total_text_length'] / max(results['pages_with_text'], 1)
    
    doc.close()
    return results

def calculate_text_density(image):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (0-1)
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
        if len(image.shape) == 3:
            gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
        else:
            gray = np.array(image)
        
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π)
        _, binary = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY_INV)
        
        # –ü–æ–¥—Å—á–µ—Ç —á–µ—Ä–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç)
        black_pixels = np.sum(binary == 255)
        total_pixels = binary.shape[0] * binary.shape[1]
        
        text_density = black_pixels / total_pixels
        return min(text_density, 1.0)  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1.0
        
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏: {e}")
        return 0.0

def analyze_visual_text_density(pdf_path, sample_pages=5):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        float: —Å—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    """
    print("üëÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å...")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        images = convert_from_path(pdf_path, first_n=min(sample_pages, 10), dpi=100)
        
        if not images:
            return 0.0
        
        densities = []
        for img in images:
            density = calculate_text_density(img)
            densities.append(density)
        
        avg_density = np.mean(densities) if densities else 0.0
        return avg_density
        
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return 0.0

def get_file_metrics(pdf_path):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: —Ñ–∞–π–ª–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    """
    file_stats = os.stat(pdf_path)
    return {
        'file_size_mb': file_stats.st_size / (1024 * 1024),
        'filename': os.path.basename(pdf_path)
    }

def needs_ocr_analysis(text_analysis, visual_analysis, file_metrics):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –µ—Å–ª–∏ –Ω—É–∂–µ–Ω OCR, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR
    rules = [
        # –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è –≤–æ–æ–±—â–µ
        not text_analysis['has_text_layer'],
        
        # –ú–µ–Ω—å—à–µ 30% —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç
        text_analysis['text_pages_ratio'] < 0.3,
        
        # –ù–∏–∑–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (–º–µ–Ω—å—à–µ 2%)
        visual_analysis < 0.02,
        
        # –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞–Ω—ã)
        (file_metrics['file_size_mb'] > 5 and 
         text_analysis['avg_text_per_page'] < 50),
        
        # –ú–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
        (text_analysis['total_pages'] > 10 and 
         text_analysis['text_pages_ratio'] < 0.5)
    ]
    
    # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è - –Ω—É–∂–µ–Ω OCR
    return any(rules)

def setup_poppler():
    """–ù–∞—Ö–æ–¥–∏—Ç Poppler –≤ —Å–∏—Å—Ç–µ–º–µ"""
    poppler_cmd = shutil.which("pdftoppm")
    if poppler_cmd:
        return os.path.dirname(poppler_cmd)
    return None

def analyze_pdf_ocr_need(pdf_path):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ OCR
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PDF: {os.path.basename(pdf_path)}")
    print("=" * 50)
    
    try:
        # 1. –§–∞–π–ª–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        file_metrics = get_file_metrics(pdf_path)
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_metrics['file_size_mb']:.2f} MB")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
        text_analysis = analyze_pdf_text_layer(pdf_path)
        print(f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º: {text_analysis['pages_with_text']}/{text_analysis['total_pages']}")
        print(f"üìä –î–æ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {text_analysis['text_pages_ratio']:.1%}")
        print(f"üìù –°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {text_analysis['avg_text_per_page']:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 3. –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Poppler –¥–æ—Å—Ç—É–ø–µ–Ω)
        poppler_path = setup_poppler()
        if poppler_path:
            visual_density = analyze_visual_text_density(pdf_path)
            print(f"üéØ –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {visual_density:.3%}")
        else:
            visual_density = 0.0
            print("‚ö† Poppler –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # 4. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
        ocr_required = needs_ocr_analysis(text_analysis, visual_density, file_metrics)
        
        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'filename': file_metrics['filename'],
            'has_text_layer': text_analysis['has_text_layer'],
            'text_pages_ratio': text_analysis['text_pages_ratio'],
            'avg_text_density': visual_density,
            'ocr_required': ocr_required,
            'file_size_mb': file_metrics['file_size_mb'],
            'total_pages': text_analysis['total_pages']
        }
        
        print("=" * 50)
        status = "üö® OCR –¢–†–ï–ë–£–ï–¢–°–Ø" if ocr_required else "‚úÖ OCR –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø"
        print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {status}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ - –∑–∞–º–µ–Ω–∏ –ø—É—Ç—å –Ω–∞ —Å–≤–æ–π PDF
    pdf_path = r"C:\Users\Pavel\Desktop\Dev\FirstTask\testpdf1.pdf"  # —É–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É PDF
    
    if os.path.exists(pdf_path):
        result = analyze_pdf_ocr_need(pdf_path)
        if result:
            print("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
            print(f"–§–∞–π–ª: {result['filename']}")
            print(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π: {'–ï—Å—Ç—å' if result['has_text_layer'] else '–ù–µ—Ç'}")
            print(f"–î–æ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {result['text_pages_ratio']:.1%}")
            print(f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {result['avg_text_density']:.3%}")
            print(f"OCR required: {result['ocr_required']}")
    else:
        print("‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")